[{"content":"UserCF UserCF uses ratings of the target item from top N similar users to predict the rating from the current user. There are mainly two steps:\nSteps 1. Calculate similarities between users. There are three common ways of calculating user similarities:\na. Jaccard Similarity: $$J_{u,v} = \\frac{|N(u) \\cap N(v)|}{|N(u) \\cup N(v)|}$$ $N(u)$ denotes the interacted item set of user $u$.\nb. Cosine Similarity: $$cos(u,v) = \\frac{u\\cdot v}{|u|\\cdot|v|}$$ $u$ and $v$ denote the rating vectors of two users respectively.\nc. Pearson Correlation Coefficient: $$Pearson_{u,v} = \\frac{\\sum_i(r_{ui} - \\overline r_u)(r_{vi} - \\overline r_v)}{\\sqrt{\\sum_i (r_{ui} - \\overline r_u)^2} \\sqrt{\\sum_i (r_{vi} - \\overline r_v)^2}}$$ $r_{ui}$ denotes rating of item $i$ from user $u$ and $\\overline r_u$ denotes the average rating of user $u$. Compared with Cosine Similarity, Pearson Correlation Coefficient subtracts users\u0026rsquo; ratings by their average rating to reduce the effect of users\u0026rsquo; rating biases.\n2. Use ratings from the top N similar users to predict the rating from the current user. The equation of calculating predicted rating of item $p$ by user $u$ is:\n$$R_{u,p} = \\frac{\\sum_{s \\in S}sim_{s,u} \\cdot R_{s,p}}{\\sum_{s \\in S}sim_{s,u}}$$\nSimilar to Pearson Correlation Coefficient, we can further reduce the effect of users\u0026rsquo; rating biases by substracting each user\u0026rsquo;s ratings by his/her average rating:\n$$R_{u,p} = \\overline R_u + \\frac{\\sum_{s \\in S}sim_{s,u} \\cdot (R_{s,p} - \\overline R_s)}{\\sum_{s \\in S}sim_{s,u}}$$\nFinally, after ranking $R_{u,p}$ for all possible items $p$, we can recommend the top k items to the current user.\nAnalysis  When the number of items is large, the overlap between the interaction histories of two users will be so small that it\u0026rsquo;s hard to calculate the similarity between them. UserCF requires maintaining a super large user similarity matrix to get the top N similar users fast which is extremely space consuming. UserCF is more suitable when the number of users is small and the number of items is large. As it is based on user similarity, it can help users to find their potential interests. Thus it may perform better when the interests of users change quickly, e.g. in the context of news recommendations.   ItemCF ItemCF recommends the top N similar items of the current item based on user historical behaviors, i.e. recommends the items that were usually bought by the user who also bought the current item.\nSteps 1. Calculate similarities between items. Similar to UserCF, we can use Cosine Similarity and Pearson Correlation Coefficient to calculate the similarity between two items.\nAlso, we can use a simpler equation $sim_{p,q} = \\frac{|N(p) \\cap N(q)|}{|N(p)|}$ to calculate the similarity, where $N(p)$ denotes the set of users who bought item $p$.\n2. Calculate ratings of related items and recommend the top K of them. The predicted rating of current item $p$ by user $u$ can be calculated by:\n$$R_{u,p} = \\overline R_p + \\frac{\\sum_{q\\in S}sim_{p,q}(R_{u,q} - \\overline R_{q})}{\\sum_{q\\in S}sim_{p,q}}$$\nwhere S denotes the set of top N similar items of item $p$.\nOptimize the similarity equation We\u0026rsquo;ll take the simple similarity equation $sim_{p,q} = \\frac{|N(p) \\cap N(q)|}{|N(p)|}$ as an example.\nAdd penalties for popular items $$sim_{p,q} = \\frac{|N(p) \\cap N(q)|}{\\sqrt{|N(p)|\\cdot |N(q)|}}$$\nThe more popluar an item is, the more penalty it will get.\nControl penalties for popular items $$sim_{p,q} = \\frac{|N(p) \\cap N(q)|}{|N(p)|^{1-\\alpha}\\cdot |N(q)|^\\alpha}$$\nWe can introduce a hyper parameter $\\alpha$ to contral the penalties for popular items.\nAdd penalties for extremely active users $$sim_{p,q} = \\frac{1}{|N(p)|^{1-\\alpha}\\cdot |N(q)|^\\alpha}\\sum_{u \\in {N(p) \\cap N(q)}} \\frac{1}{\\log (1+|I(u)|)}$$\n$I(u)$ here denotes the set of items bought by user $u$. For an unusually active user, his/her contribution should be less than that of an inactive user when calculating the similarity between items.\nAnalysis  ItemCF is more suitable when the number of items is small and the number of users is large and users\u0026rsquo; interests are stable, e.g. movie and music recommendations.  Conclusion  One of the pros of Collaborative Filtering is that it only requires user-item interaction history as input. However, it\u0026rsquo;s also one of the cons because it cannot utilize other item and user features. Popular items are likely to be similar to a large number of items, while tail items are rarely recommended due to sparse interactive vectors.   References [1] Ruyi Luo et al. FunRec - UserCF\n[2] Ruyi Luo et al. FunRec - ItemCF\n[3] Ruyi Luo et al. FunRec - Swing\n","permalink":"https://wp-zhang.github.io/posts/collaborative-filtering/","summary":"UserCF UserCF uses ratings of the target item from top N similar users to predict the rating from the current user. There are mainly two steps:\nSteps 1. Calculate similarities between users. There are three common ways of calculating user similarities:\na. Jaccard Similarity: $$J_{u,v} = \\frac{|N(u) \\cap N(v)|}{|N(u) \\cup N(v)|}$$ $N(u)$ denotes the interacted item set of user $u$.\nb. Cosine Similarity: $$cos(u,v) = \\frac{u\\cdot v}{|u|\\cdot|v|}$$ $u$ and $v$ denote the rating vectors of two users respectively.","title":"Collaborative Filtering"},{"content":"Feature Engineering 1. Why do we need to apply normalization to numerical features? There are two common ways of normalization:\na. Min-Max Scaling\n$$X_{norm} = \\frac{X-X_{min}}{X_{max}-X_{min}}$$\nThis method can scale the data into a range of [0,1).\nb. Z-Score Normalization\n$$z = \\frac{x-\\mu}{\\rho}, \\quad \\rho=\\sqrt{\\sum\\frac{(x_i-\\mu)^2}{N}}$$\nThis method will scale the data and make the mean value and standard deviation of the new data become 0 and 1 respectively.\nWhen the scales of features are different, the gradients of weights of features can be very different, leading to a different \u0026rsquo;learning pace\u0026rsquo; of each weight, shown as a zig-zag on the gradient plot. Scaling features can make the \u0026rsquo;learning pace\u0026rsquo; of each weight become closer and let the model converge faster.\nScaling the features can be useful when the model uses gradient descent to update the parameters. Otherwise, it may not make a difference, e.g. when the model is a decision tree.\n2. How do we handle categorical features? We can use Ordinal Encoding, One-hot Encoding, and Binary Encoding based on the categorical feature itself. In deep learning, we can learn an embedding representation of a categorical feature, which can be seen as an advanced way of One-hot Encoding and Binary Encoding.\nWe can further encode categorical features with other features, e.g. statistical values of numerical features of each category, and target encoding.\n3. What is Feature Intersection? How do we intersect high-dimensional features? We can intersect different features and generate new features to improve the fitting ability of our model.\nFor high-dimensional features, we can first represent them in lower dimensions and then intersect them. A typical case is using eigenvectors to represent users and items in a recommender system and then intersecting the eigenvectors to represent the relationship between users and items.\n","permalink":"https://wp-zhang.github.io/posts/crack-machine-learning-interviews/","summary":"Feature Engineering 1. Why do we need to apply normalization to numerical features? There are two common ways of normalization:\na. Min-Max Scaling\n$$X_{norm} = \\frac{X-X_{min}}{X_{max}-X_{min}}$$\nThis method can scale the data into a range of [0,1).\nb. Z-Score Normalization\n$$z = \\frac{x-\\mu}{\\rho}, \\quad \\rho=\\sqrt{\\sum\\frac{(x_i-\\mu)^2}{N}}$$\nThis method will scale the data and make the mean value and standard deviation of the new data become 0 and 1 respectively.\nWhen the scales of features are different, the gradients of weights of features can be very different, leading to a different \u0026rsquo;learning pace\u0026rsquo; of each weight, shown as a zig-zag on the gradient plot.","title":"Crack Machine Learning Interviews"},{"content":"\nHi there~\nI\u0026rsquo;m Weipeng Zhang and you can call me Y.Paang (much easier to pronounce).\nI\u0026rsquo;m currently an MSDS student at Northeastern University, Boston, US. I\u0026rsquo;m a machine learning and data mining enthusiast and have work experience in data engineering.\nI love to spend my spare time participating in Kaggle competitions. I\u0026rsquo;m currently a Kaggle Competition Expert and have won 2 silver medals (one recently) so far.\n","permalink":"https://wp-zhang.github.io/about/","summary":"Hi there~\nI\u0026rsquo;m Weipeng Zhang and you can call me Y.Paang (much easier to pronounce).\nI\u0026rsquo;m currently an MSDS student at Northeastern University, Boston, US. I\u0026rsquo;m a machine learning and data mining enthusiast and have work experience in data engineering.\nI love to spend my spare time participating in Kaggle competitions. I\u0026rsquo;m currently a Kaggle Competition Expert and have won 2 silver medals (one recently) so far.","title":"About"}]